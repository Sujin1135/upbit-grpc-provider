// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraderClient is the client API for Trader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraderClient interface {
}

type traderClient struct {
	cc grpc.ClientConnInterface
}

func NewTraderClient(cc grpc.ClientConnInterface) TraderClient {
	return &traderClient{cc}
}

// TraderServer is the server API for Trader service.
// All implementations must embed UnimplementedTraderServer
// for forward compatibility
type TraderServer interface {
	mustEmbedUnimplementedTraderServer()
}

// UnimplementedTraderServer must be embedded to have forward compatible implementations.
type UnimplementedTraderServer struct {
}

func (UnimplementedTraderServer) mustEmbedUnimplementedTraderServer() {}

// UnsafeTraderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraderServer will
// result in compilation errors.
type UnsafeTraderServer interface {
	mustEmbedUnimplementedTraderServer()
}

func RegisterTraderServer(s grpc.ServiceRegistrar, srv TraderServer) {
	s.RegisterService(&Trader_ServiceDesc, srv)
}

// Trader_ServiceDesc is the grpc.ServiceDesc for Trader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trader.Trader",
	HandlerType: (*TraderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/trader.proto",
}
